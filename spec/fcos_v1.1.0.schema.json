{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/z5labs/bbcos/butane/spec/fcos_v1.1.0.schema.json",
  "title": "Fedora CoreOS Specification v1.0.0",
  "description": "The Fedora CoreOS configuration is a YAML document conforming to the following specification, with italicized entries being optional",
  "type": "object",
  "properties": {
    "ignition": {
      "type": "object",
      "description": "metadata about the configuration itself.",
      "properties": {
        "config": {
          "type": "object",
          "description": "options related to the configuration.",
          "properties": {
            "merge": {
              "type": "array",
              "description": "a list of the configs to be merged to the current config.",
              "items": {
                "type": "object",
                "properties": {
                  "http_headers": {
                    "type": "array",
                    "description": "a list of HTTP headers to be added to the request. Available for http and https source schemes only.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "the header name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "the header contents.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "inline": {
                    "description": "the contents of the config. Mutually exclusive with source and local.",
                    "type": "string"
                  },
                  "local": {
                    "description": "a local path to the contents of the config, relative to the directory specified by the --files-dir command-line argument. Mutually exclusive with source and inline.",
                    "type": "string"
                  },
                  "source": {
                    "description": "the URL of the config. Supported schemes are http, https, s3, tftp, and data. Note: When using http, it is advisable to use the verification option to ensure the contents haven't been modified. Mutually exclusive with inline and local.",
                    "type": "string",
                    "enum": [
                      "http",
                      "https",
                      "s3",
                      "tftp",
                      "data"
                    ]
                  },
                  "verification": {
                    "type": "object",
                    "description": "options related to the verification of the config.",
                    "properties": {
                      "hash": {
                        "description": "the hash of the config, in the form <type>-<value> where type is either sha512 or sha256.",
                        "type": "string",
                        "pattern": "^sha(512|256)-.+"
                      }
                    }
                  }
                }
              }
            },
            "replace": {
              "description": "the config that will replace the current.",
              "properties": {
                "http_headers": {
                  "description": "a list of HTTP headers to be added to the request. Available for http and https source schemes only.",
                  "items": {
                    "properties": {
                      "name": {
                        "description": "the header name.",
                        "type": "string"
                      },
                      "value": {
                        "description": "the header contents.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "inline": {
                  "description": "the contents of the config. Mutually exclusive with source and local.",
                  "type": "string"
                },
                "local": {
                  "description": "a local path to the contents of the config, relative to the directory specified by the --files-dir command-line argument. Mutually exclusive with source and inline.",
                  "type": "string"
                },
                "source": {
                  "description": "the URL of the config. Supported schemes are http, https, s3, tftp, and data. Note: When using http, it is advisable to use the verification option to ensure the contents haven't been modified. Mutually exclusive with inline and local.",
                  "type": "string"
                },
                "verification": {
                  "description": "options related to the verification of the config.",
                  "properties": {
                    "hash": {
                      "description": "the hash of the config, in the form <type>-<value> where type is either sha512 or sha256.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "proxy": {
          "description": "options relating to setting an HTTP(S) proxy when fetching resources.",
          "properties": {
            "http_proxy": {
              "description": "will be used as the proxy URL for HTTP requests and HTTPS requests unless overridden by https_proxy or no_proxy.",
              "type": "string"
            },
            "https_proxy": {
              "description": "will be used as the proxy URL for HTTPS requests unless overridden by no_proxy.",
              "type": "string"
            },
            "no_proxy": {
              "description": "specifies a list of strings to hosts that should be excluded from proxying. Each value is represented by an IP address prefix (1.2.3.4), an IP address prefix in CIDR notation (1.2.3.4/8), a domain name, or a special DNS label (*). An IP address prefix and domain name can also include a literal port number (1.2.3.4:80). A domain name matches that name and all subdomains. A domain name with a leading . matches subdomains only. For example foo.com matches foo.com and bar.foo.com; .y.com matches x.y.com but not y.com. A single asterisk (*) indicates that no proxying should be done.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "security": {
          "description": "options relating to network security.",
          "properties": {
            "tls": {
              "description": "options relating to TLS when fetching resources over https.",
              "properties": {
                "certificate_authorities": {
                  "description": "the list of additional certificate authorities (in addition to the system authorities) to be used for TLS verification when fetching over https. All certificate authorities must have a unique source, inline, or local.",
                  "items": {
                    "properties": {
                      "http_headers": {
                        "description": "a list of HTTP headers to be added to the request. Available for http and https source schemes only.",
                        "items": {
                          "properties": {
                            "name": {
                              "description": "the header name.",
                              "type": "string"
                            },
                            "value": {
                              "description": "the header contents.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "inline": {
                        "description": "the contents of the certificate bundle (in PEM format). With Ignition &ge; 2.4.0, the bundle can contain multiple concatenated certificates. Mutually exclusive with source and local.",
                        "type": "string"
                      },
                      "local": {
                        "description": "a local path to the contents of the certificate bundle (in PEM format), relative to the directory specified by the --files-dir command-line argument. With Ignition &ge; 2.4.0, the bundle can contain multiple concatenated certificates. Mutually exclusive with source and inline.",
                        "type": "string"
                      },
                      "source": {
                        "description": "the URL of the certificate bundle (in PEM format). With Ignition &ge; 2.4.0, the bundle can contain multiple concatenated certificates. Supported schemes are http, https, s3, tftp, and data. Note: When using http, it is advisable to use the verification option to ensure the contents haven't been modified. Mutually exclusive with inline and local.",
                        "type": "string"
                      },
                      "verification": {
                        "description": "options related to the verification of the certificate.",
                        "properties": {
                          "hash": {
                            "description": "the hash of the certificate, in the form <type>-<value> where type is either sha512 or sha256.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "timeouts": {
          "description": "options relating to http timeouts when fetching files over http or https.",
          "properties": {
            "http_response_headers": {
              "description": " the time to wait (in seconds) for the server's response headers (but not the body) after making a request. 0 indicates no timeout. Default is 10 seconds.",
              "type": "integer"
            },
            "http_total": {
              "description": " the time limit (in seconds) for the operation (connection, request, and response), including retries. 0 indicates no timeout. Default is 0.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "passwd": {
      "description": "describes the desired additions to the passwd database.",
      "properties": {
        "groups": {
          "description": "the list of groups to be added. All groups must have a unique name.",
          "items": {
            "properties": {
              "gid": {
                "description": "the group ID of the new group.",
                "type": "integer"
              },
              "name": {
                "description": "the name of the group.",
                "type": "string"
              },
              "password_hash": {
                "description": "the hashed password of the new group.",
                "type": "string"
              },
              "system": {
                "description": "whether or not the group should be a system group. This only has an effect if the group doesn't exist yet.",
                "type": "bool"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "users": {
          "description": "the list of accounts that shall exist. All users must have a unique name.",
          "items": {
            "properties": {
              "gecos": {
                "description": "the GECOS field of the account.",
                "type": "string"
              },
              "groups": {
                "description": "the list of supplementary groups of the account.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "home_dir": {
                "description": "the home directory of the account.",
                "type": "string"
              },
              "name": {
                "description": "the username for the account.",
                "type": "string"
              },
              "no_create_home": {
                "description": "whether or not to create the user's home directory. This only has an effect if the account doesn't exist yet.",
                "type": "boolean"
              },
              "no_log_init": {
                "description": "whether or not to add the user to the lastlog and faillog databases. This only has an effect if the account doesn't exist yet.",
                "type": "boolean"
              },
              "no_user_group": {
                "description": "whether or not to create a group with the same name as the user. This only has an effect if the account doesn't exist yet.",
                "type": "boolean"
              },
              "password_hash": {
                "description": "the hashed password for the account.",
                "type": "string"
              },
              "primary_group": {
                "description": "the name of the primary group of the account.",
                "type": "string"
              },
              "shell": {
                "description": "the login shell of the new account.",
                "type": "string"
              },
              "ssh_authorized_keys": {
                "description": "a list of SSH keys to be added as an SSH key fragment at .ssh/authorized_keys.d/ignition in the user's home directory. All SSH keys must be unique.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "system": {
                "description": "whether or not this account should be a system account. This only has an effect if the account doesn't exist yet.",
                "type": "bool"
              },
              "uid": {
                "description": "the user ID of the account.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "storage": {
      "description": "describes the desired state of the system's storage devices.",
      "properties": {
        "directories": {
          "description": "the list of directories to be created. Every file, directory, and link must have a unique path.",
          "items": {
            "properties": {
              "group": {
                "description": "specifies the group of the owner.",
                "properties": {
                  "id": {
                    "description": "the group ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the group name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "mode": {
                "description": "the directory's permission mode. If not specified, the permission mode for directories defaults to 0755 or the mode of an existing directory if overwrite is false and a directory already exists at the path.",
                "type": "integer"
              },
              "overwrite": {
                "description": "whether to delete preexisting nodes at the path. If false and a directory already exists at the path, Ignition will only set its permissions. If false and a non-directory exists at that path, Ignition will fail. Defaults to false.",
                "type": "boolean"
              },
              "path": {
                "description": "the absolute path to the directory.",
                "type": "string"
              },
              "user": {
                "description": "specifies the directory's owner.",
                "properties": {
                  "id": {
                    "description": "the user ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the user name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "disks": {
          "description": "the list of disks to be configured and their options. Every entry must have a unique device.",
          "items": {
            "properties": {
              "device": {
                "description": "the absolute path to the device. Devices are typically referenced by the /dev/disk/by-* symlinks.",
                "type": "string"
              },
              "partitions": {
                "description": "the list of partitions and their configuration for this particular disk. Every partition must have a unique number, or if 0 is specified, a unique label.",
                "items": {
                  "properties": {
                    "guid": {
                      "description": "the GPT unique partition GUID.",
                      "type": "string"
                    },
                    "label": {
                      "description": "the PARTLABEL for the partition.",
                      "type": "string"
                    },
                    "number": {
                      "description": "the partition number, which dictates it's position in the partition table (one-indexed). If zero, use the next available partition slot.",
                      "type": "integer"
                    },
                    "should_exist": {
                      "description": " whether or not the partition with the specified number should exist. If omitted, it defaults to true. If false Ignition will either delete the specified partition or fail, depending on wipePartitionEntry. If false number must be specified and non-zero and label, start, size, guid, and typeGuid must all be omitted.",
                      "type": "boolean"
                    },
                    "size_mib": {
                      "description": "the size of the partition (in mebibytes). If zero, the partition will be made as large as possible.",
                      "type": "integer"
                    },
                    "start_mib": {
                      "description": "the start of the partition (in mebibytes). If zero, the partition will be positioned at the start of the largest block available.",
                      "type": "integer"
                    },
                    "type_guid": {
                      "description": "the GPT partition type GUID. If omitted, the default will be 0FC63DAF-8483-4772-8E79-3D69D8477DE4 (Linux filesystem data).",
                      "type": "string"
                    },
                    "wipe_partition_entry": {
                      "description": " if true, Ignition will clobber an existing partition if it does not match the config. If false (default), Ignition will fail instead.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "wipe_table": {
                "description": "whether or not the partition tables shall be wiped. When true, the partition tables are erased before any further manipulation. Otherwise, the existing entries are left intact.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "files": {
          "description": "the list of files to be written. Every file, directory and link must have a unique path.",
          "items": {
            "properties": {
              "append": {
                "description": "list of contents to be appended to the file. Follows the same stucture as contents",
                "items": {
                  "properties": {
                    "compression": {
                      "description": "the type of compression used on the contents (null or gzip). Compression cannot be used with S3.",
                      "type": "string"
                    },
                    "http_headers": {
                      "description": "a list of HTTP headers to be added to the request. Available for http and https source schemes only.",
                      "items": {
                        "properties": {
                          "name": {
                            "description": "the header name.",
                            "type": "string"
                          },
                          "value": {
                            "description": "the header contents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "inline": {
                      "description": "the contents to append. Mutually exclusive with source and local.",
                      "type": "string"
                    },
                    "local": {
                      "description": "a local path to the contents to append, relative to the directory specified by the --files-dir command-line argument. Mutually exclusive with source and inline.",
                      "type": "string"
                    },
                    "source": {
                      "description": "the URL of the contents to append. Supported schemes are http, https, tftp, s3, and data. When using http, it is advisable to use the verification option to ensure the contents haven't been modified. Mutually exclusive with inline and local.",
                      "type": "string"
                    },
                    "verification": {
                      "description": "options related to the verification of the appended contents.",
                      "properties": {
                        "hash": {
                          "description": "the hash of the config, in the form <type>-<value> where type is either sha512 or sha256.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "contents": {
                "description": "options related to the contents of the file.",
                "properties": {
                  "compression": {
                    "description": "the type of compression used on the contents (null or gzip). Compression cannot be used with S3.",
                    "type": "string"
                  },
                  "http_headers": {
                    "description": "a list of HTTP headers to be added to the request. Available for http and https source schemes only.",
                    "items": {
                      "properties": {
                        "name": {
                          "description": "the header name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "the header contents.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "inline": {
                    "description": "the contents of the file. Mutually exclusive with source and local.",
                    "type": "string"
                  },
                  "local": {
                    "description": "a local path to the contents of the file, relative to the directory specified by the --files-dir command-line argument. Mutually exclusive with source and inline.",
                    "type": "string"
                  },
                  "source": {
                    "description": "the URL of the file contents. Supported schemes are http, https, tftp, s3, and data. When using http, it is advisable to use the verification option to ensure the contents haven't been modified. If source is omitted and a regular file already exists at the path, Ignition will do nothing. If source is omitted and no file exists, an empty file will be created. Mutually exclusive with inline and local.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "options related to the verification of the file contents.",
                    "properties": {
                      "hash": {
                        "description": "the hash of the config, in the form <type>-<value> where type is either sha512 or sha256.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "group": {
                "description": "specifies the group of the owner.",
                "properties": {
                  "id": {
                    "description": "the group ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the group name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "mode": {
                "description": "the file's permission mode. If not specified, the permission mode for files defaults to 0644 or the existing file's permissions if overwrite is false, contents is unspecified, and a file already exists at the path.",
                "type": "integer"
              },
              "overwrite": {
                "description": "whether to delete preexisting nodes at the path. contents must be specified if overwrite is true. Defaults to false.",
                "type": "boolean"
              },
              "path": {
                "description": "the absolute path to the file.",
                "type": "string"
              },
              "user": {
                "description": "specifies the file's owner.",
                "properties": {
                  "id": {
                    "description": "the user ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the user name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "filesystems": {
          "description": "the list of filesystems to be configured. device and format need to be specified. Every filesystem must have a unique device.",
          "items": {
            "properties": {
              "device": {
                "description": "the absolute path to the device. Devices are typically referenced by the /dev/disk/by-* symlinks.",
                "type": "string"
              },
              "format": {
                "description": "the filesystem format (ext4, btrfs, xfs, vfat, or swap).",
                "type": "string"
              },
              "label": {
                "description": "the label of the filesystem.",
                "type": "string"
              },
              "mount_options": {
                "description": "any special options to be passed to the mount command.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "options": {
                "description": "any additional options to be passed to the format-specific mkfs utility.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "path": {
                "description": "the mount-point of the filesystem while Ignition is running relative to where the root filesystem will be mounted. This is not necessarily the same as where it should be mounted in the real root, but it is encouraged to make it the same.",
                "type": "string"
              },
              "uuid": {
                "description": "the uuid of the filesystem.",
                "type": "string"
              },
              "wipe_filesystem": {
                "description": "whether or not to wipe the device before filesystem creation, see the documentation on filesystems for more information. Defaults to false.",
                "type": "boolean"
              },
              "with_mount_unit": {
                "description": "Whether to generate a generic mount unit for this filesystem as well. If a more specific unit is needed, a custom one can be specified in the systemd.units section. The unit will be named with the escaped version of the path.",
                "type": "bool"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "links": {
          "description": "the list of links to be created. Every file, directory, and link must have a unique path.",
          "items": {
            "properties": {
              "group": {
                "description": "specifies the group of the owner.",
                "properties": {
                  "id": {
                    "description": "the group ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the group name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "hard": {
                "description": "a symbolic link is created if this is false, a hard one if this is true.",
                "type": "boolean"
              },
              "overwrite": {
                "description": "whether to delete preexisting nodes at the path. If overwrite is false and a matching link exists at the path, Ignition will only set the owner and group. Defaults to false.",
                "type": "boolean"
              },
              "path": {
                "description": "the absolute path to the link",
                "type": "string"
              },
              "target": {
                "description": "the target path of the link",
                "type": "string"
              },
              "user": {
                "description": "specifies the symbolic link's owner.",
                "properties": {
                  "id": {
                    "description": "the user ID of the owner.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "the user name of the owner.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "raid": {
          "description": "the list of RAID arrays to be configured. Every RAID array must have a unique name.",
          "items": {
            "properties": {
              "devices": {
                "description": "the list of devices (referenced by their absolute path) in the array.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "level": {
                "description": "the redundancy level of the array (e.g. linear, raid1, raid5, etc.).",
                "type": "string"
              },
              "name": {
                "description": "the name to use for the resulting md device.",
                "type": "string"
              },
              "options": {
                "description": "any additional options to be passed to mdadm.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "spares": {
                "description": "the number of spares (if applicable) in the array.",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "trees": {
          "description": "a list of local directory trees to be embedded in the config. Ownership is not preserved. File modes are set to 0755 if the local file is executable or 0644 otherwise. Attributes of files, directories, and symlinks can be overridden by creating a corresponding entry in the files, directories, or links section; such files entries must omit contents and such links entries must omit target.",
          "items": {
            "properties": {
              "local": {
                "description": "the base of the local directory tree, relative to the directory specified by the --files-dir command-line argument.",
                "type": "string"
              },
              "path": {
                "description": "the path of the tree within the target system. Defaults to /.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "systemd": {
      "description": "describes the desired state of the systemd units.",
      "properties": {
        "units": {
          "description": "the list of systemd units. Every unit must have a unique name.",
          "items": {
            "properties": {
              "contents": {
                "description": "the contents of the unit.",
                "type": "string"
              },
              "dropins": {
                "description": "the list of drop-ins for the unit. Every drop-in must have a unique name.",
                "items": {
                  "properties": {
                    "contents": {
                      "description": "the contents of the drop-in.",
                      "type": "string"
                    },
                    "name": {
                      "description": "the name of the drop-in. This must be suffixed with \".conf\".",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "enabled": {
                "description": "whether or not the service shall be enabled. When true, the service is enabled. When false, the service is disabled. When omitted, the service is unmodified. In order for this to have any effect, the unit must have an install section.",
                "type": "boolean"
              },
              "mask": {
                "description": "whether or not the service shall be masked. When true, the service is masked by symlinking it to /dev/null.",
                "type": "boolean"
              },
              "name": {
                "description": "the name of the unit. This must be suffixed with a valid unit type (e.g. \"thing.service\").",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "variant": {
      "description": "used to differentiate configs for different operating systems. Must be fcos for this specification.",
      "type": "string",
      "enum": [
        "fcos"
      ]
    },
    "version": {
      "description": "the semantic version of the spec for this document. This document is for version 1.1.0 and generates Ignition configs with version 3.1.0.",
      "type": "string",
      "enum": [
        "1.1.0"
      ]
    }
  }
}
